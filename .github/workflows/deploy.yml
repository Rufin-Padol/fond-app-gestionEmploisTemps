name: Deploy Angular App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.17.0'
        cache: 'npm'

    - name: Verify Node and npm versions
      run: |
        echo "Node version: $(node --version)"
        echo "npm version: $(npm --version)"

    - name: Debug SSH Configuration
      run: |
        echo "=== Debug SSH Configuration ==="
        echo "Host: ${{ secrets.VPS_HOST }}"
        echo "Username: ${{ secrets.VPS_USERNAME }}"
        echo "Key contents (first 50 chars):"
        echo "${{ secrets.VPS_SSH_KEY }}" | head -c 50
        echo "..."
        echo "Key ends with:"
        echo "${{ secrets.VPS_SSH_KEY }}" | tail -c 50
        
        mkdir -p ~/.ssh
        echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        echo "SSH key file created with permissions:"
        ls -la ~/.ssh/deploy_key
        
        echo "Testing SSH connection (verbose mode):"
        ssh -i ~/.ssh/deploy_key \
            -o StrictHostKeyChecking=no \
            -v \
            ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_HOST }} \
            "echo 'SSH connection successful'" || echo "SSH connection failed"

    - name: Transfer entire project to VPS
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        source: "."
        target: "/home/mbemnova1/deploy/angular-app/"
        strip_components: 0
        debug: true

    - name: Deploy on VPS (Build and Run)
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          set -e
          
          echo "🚀 Démarrage du déploiement Angular..."
          
          # Naviguer vers le répertoire de déploiement
          cd /home/mbemnova1/deploy/angular-app
          
          # Installer les dépendances
          echo "📦 Installation des dépendances..."
          npm ci
          
          # Build de l'application
          echo "🔨 Construction de l'application..."
          npm run build
          
          # Vérifier que le build a réussi
          if [ ! -d "dist" ]; then
            echo "❌ Erreur: le dossier dist/ n'a pas été créé"
            exit 1
          fi
          
          # Arrêter et supprimer l'ancien container
          echo "📦 Arrêt de l'ancien container..."
          docker stop angular-app 2>/dev/null || echo "Aucun container à arrêter"
          docker rm angular-app 2>/dev/null || echo "Aucun container à supprimer"
          
          # Nettoyer les anciennes images
          echo "🧹 Nettoyage des anciennes images..."
          docker image prune -f
          
          # Créer un Dockerfile temporaire
          echo "FROM nginx:alpine" > Dockerfile.deploy
          echo "RUN rm /etc/nginx/conf.d/default.conf" >> Dockerfile.deploy
          echo "COPY nginx.conf /etc/nginx/conf.d/" >> Dockerfile.deploy
          echo "COPY dist/ /usr/share/nginx/html/" >> Dockerfile.deploy
          echo "EXPOSE 80" >> Dockerfile.deploy
          echo 'CMD ["nginx", "-g", "daemon off;"]' >> Dockerfile.deploy
          
          # Build de la nouvelle image
          echo "🔨 Build de la nouvelle image Docker..."
          docker build -f Dockerfile.deploy -t angular-app:latest .
          
          # Démarrer le nouveau container
          echo "🎯 Démarrage du nouveau container..."
          docker run -d \
            --name angular-app \
            -p 3000:80 \
            --restart unless-stopped \
            angular-app:latest
          
          # Vérifier que le container fonctionne
          sleep 5
          if docker ps | grep -q angular-app; then
            echo "✅ Déploiement réussi! Application disponible sur le port 3000"
            echo "📋 Status du container:"
            docker ps | grep angular-app
            echo "📋 Logs récents:"
            docker logs angular-app --tail 10
          else
            echo "❌ Erreur lors du déploiement"
            docker logs angular-app --tail 20
            exit 1
          fi
          
          # Nettoyer les fichiers temporaires
          rm -f Dockerfile.deploy